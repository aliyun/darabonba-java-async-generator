/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'test';
  @version = '';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

function test1(): iterator[string];
function test2(): iterator[string]{
    return test1();
}

function test3(iter: iterator[string]): string{
    var it = iter;
    var str : string = '';
    for (var i : it) {
        str = `${str}, ${i}`;
    }
    return str;
}

function test4(test: any): void{
}

function test5(iter: iterator[string]): void{
    test3(iter);
    test4(iter);
}

model ChatRequest {
  token?: string(name='Authorization', position='Header')
}

model ChatResponseBody = {
  content?: string(name='Content'),
}

model ChatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatResponseBody(name='body'),
}

function test6(request: ChatRequest): iterator[ChatResponseBody]{
    @handler.validateRequestModel(request);
    yield @handler.doSSERequest('SSE', 'chat', 'POST', '/gw/v1/api/doc/docChat', 'json', false, 'json', request);
}